<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[微信支付集成文档]]></title>
      <url>%2F2016%2F12%2F28%2F%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E9%9B%86%E6%88%90%E6%96%87%E6%A1%A3%2F</url>
      <content type="text"><![CDATA[一、开发前提 APP支付又称移动端支付，是商户通过在移动端应用APP中集成开放SDK调起微信支付模块完成支付的模式。 本文档旨在指导开发者快速集成微信APP支付，包括开发者帐号申请、服务器配置以及安卓端配置。 1、开发者资质认证登录微信开放平台：https://open.weixin.qq.com如图：在帐号中心里，选择开发者资质认证，根据申请引导进行申请，等待审核通过即可 2、创建应用如图：在管理中心里，选择移动应用，点击创建移动应用 创建应用时要求填写应用签名和应用包名，应用签名可以通过软件查看：下载地址，包名可以查看AndroidManifest.xml中声明的package值 填写各项信息之后，等待审核通过，即可获得如下权限： 3、申请开通微信支付应用审核通过后若想获取微信支付能力，需要申请开通微信支付功能，根据申请引导申请即可 4、了解支付流程以下是交互时序图，统一下单API、支付结果通知API和查询订单API等都涉及签名过程，调用都必须在商户服务器端完成。 二、服务器配置 参考文档：https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=9_1 1、统一下单商户系统先调用该接口在微信支付服务后台生成预支付交易单，返回正确的预支付交易回话标识后再在APP里面调起支付。 接口地址：https://api.mch.weixin.qq.com/pay/unifiedorder 必传参数： 字段名 变量名 必填 类型 示例值 描述 应用ID appid 是 String(32) wxd678efh567hg6787 微信开放平台审核通过的应用APPID 商户号 mch_id 是 String(32) 1230000109 微信支付分配的商户号 随机字符串 nonce_str 是 String(32) 5K8264ILTKCH16CQ2502SI8ZNMTM67VS 随机字符串，不长于32位。推荐随机数生成算法 签名 sign 是 String(32) C380BEC2BFD727A4B6845133519F3AD6 签名，详见签名生成算法 商品描述 body 是 String(128) 腾讯充值中心-QQ会员充值 商品描述交易字段格式根据不同的应用场景按照以下格式：应用市场上的APP名字-实际商品名称，天天爱消除-游戏充值。 商户订单号 out_trade_no 是 String(32) 20150806125346 商户系统内部的订单号,32个字符内、可包含字母, 其他说明见商户订单号 总金额 total_fee 是 Int 888 订单总金额，单位为分，详见支付金额 终端IP spbill_create_ip 是 String(16) 123.12.12.123 用户端实际ip 通知地址 notify_url 是 String(256) http://www.weixin.qq.com/wxpay/pay.php 接收微信支付异步通知回调地址，通知url必须为直接可访问的url，不能携带参数。 交易类型 trade_type 是 String(16) APP 支付类型 2、在线验证签名微信提供了在线验证签名，以检测开发者调用微信公众平台开发者API时发送的请求参数是否正确 在线验证地址：https://pay.weixin.qq.com/wiki/tools/signverify/ 如图：填写各项参数，点击生成签名，然后将生成的#4.最终的提交xml的内容提交给统一支付下单接口即可。 3、再次验签商户系统调用统一下单接口后在微信支付服务后台生成预支付交易订（prepay_id），返回正确的预支付交易回话标识后再将APP端需要的参数进行签名，然后返回给APP，再在APP里面调起支付。 统一下单接口返回结果如下： 1234567891011&lt;xml&gt; &lt;return_code&gt;&lt;![CDATA[SUCCESS]]&gt;&lt;/return_code&gt; &lt;return_msg&gt;&lt;![CDATA[OK]]&gt;&lt;/return_msg&gt; &lt;appid&gt;&lt;![CDATA[wxdf5a5e8166b65d8e]]&gt;&lt;/appid&gt; &lt;mch_id&gt;&lt;![CDATA[1413719303]]&gt;&lt;/mch_id&gt; &lt;nonce_str&gt;&lt;![CDATA[cCKl1CPUKbc1Viu1]]&gt;&lt;/nonce_str&gt; &lt;sign&gt;&lt;![CDATA[A457DA342972CE8EB86C9BFA46BDFC86]]&gt;&lt;/sign&gt; &lt;result_code&gt;&lt;![CDATA[SUCCESS]]&gt;&lt;/result_code&gt; &lt;prepay_id&gt;&lt;![CDATA[wx20161123112638700583976e0487596811]]&gt;&lt;/prepay_id&gt; &lt;trade_type&gt;&lt;![CDATA[APP]]&gt;&lt;/trade_type&gt; &lt;/xml&gt; 然后，将APP端需要的参数再次签名，然后将参数和签名返回给APP端如图，签名的参数至少为以下几个：（appid、partnerid、noncestr、package、prepayid、timestamp） 4、注意事项调用统一下单接口需要验签，收到返回结果之后，还需要将APP调起支付所需要的参数再次验签，然后再返回给APP端，在APP端调起支付即可。 三、Android端配置 参考文档：https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=8_5 1、注册APPID商户APP工程中引入微信JAR包，调用API前，需要先向微信注册您的APPID，代码如下： 123IWXAPI msgApi;msgApi = WXAPIFactory.createWXAPI(this, null);msgApi.registerApp(&quot;wxdf5a5e8166b65d8e&quot;);// 将该app注册到微信 经测试：以下组合均能注册成功 12msgApi = WXAPIFactory.createWXAPI(this, &quot;wxdf5a5e8166b65d8e&quot;, true);msgApi.registerApp(&quot;wxdf5a5e8166b65d8e&quot;); 12msgApi = WXAPIFactory.createWXAPI(this, &quot;wxdf5a5e8166b65d8e&quot;, false);msgApi.registerApp(&quot;wxdf5a5e8166b65d8e&quot;); 12msgApi = WXAPIFactory.createWXAPI(this, &quot;wxdf5a5e8166b65d8e&quot;);msgApi.registerApp(&quot;wxdf5a5e8166b65d8e&quot;); 2、调起支付商户服务器生成支付订单，先调用统一下单接口生成预付单，获取到prepay_id后将参数再次签名传输给APP发起支付。以下是调起微信支付的关键代码： 12345678910//msgApi，不用重新声明，使用注册时的就行PayReq request = new PayReq();request.appId = &quot;wxdf5a5e8166b65d8e&quot;;request.partnerId = &quot;1413719303&quot;;request.prepayId = &quot;wx2016112309404508902deea40216174377&quot;;request.nonceStr = &quot;pFDVAPrK4R5okMYg&quot;;request.timeStamp = &quot;1456552292&quot;;request.packageValue = &quot;Sign=WXPay&quot;;request.sign = &quot;68F28572072B187B5F27E1542BEE05F6&quot;;msgApi.sendReq(request); APP端调起支付的参数列表可参考：https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=9_12 3、支付结果回调参照微信SDK Sample，在net.sourceforge.simcpux.wxapi包路径中实现WXPayEntryActivity类(包名或类名不一致会造成无法回调，例如我的包名是com.juemuren.weixinzhifu，则该类需要放在com.juemuren.weixinzhifu.wxapi中)在manifest文件中注册： 123&lt;activity android:name=&quot;.wxapi.WXPayEntryActivity&quot; android:exported=&quot;true&quot; android:launchMode=&quot;singleTop&quot;/&gt; 在WXPayEntryActivity类中实现onResp函数，支付完成后，微信APP会返回到商户APP并回调onResp函数，开发者需要在该函数中接收通知，判断返回错误码，如果支付成功则去后台查询支付结果再展示用户实际支付结果。注意一定不能以客户端返回作为用户支付的结果，应以服务器端的接收的支付通知或查询API返回的结果为准。代码示例如下： 12345678910@Overridepublic void onResp(BaseResp resp) &#123; if (resp.getType() == ConstantsAPI.COMMAND_PAY_BY_WX) &#123; Log.e(&quot;resp.errCode=&quot;, resp.errCode + &quot;&quot;); AlertDialog.Builder builder = new AlertDialog.Builder(this); builder.setTitle(&quot;提示&quot;); builder.setMessage(&quot;支付结果&quot; + String.valueOf(resp.errCode)); builder.show(); &#125;&#125; 回调中errCode值列表： 字段名 变量名 必填 类型 示例值 描述 返回状态码 return_code 是 String(16) SUCCESS SUCCESS/FAIL SUCCESS表示商户接收通知成功并校验成功 返回信息 return_msg 否 String(128) OK 返回信息，如非空，为错误原因：签名失败 参数格式校验错误 4、注意事项实际支付结果一定不能以客户端返回作为用户支付的结果，应以服务器端的接收的支付通知或查询API返回的结果为准。 确认debug或者打包运行的程序签名与微信开发平台设置的签名一致（使用下面任意一种方法）：①、可以设置后台的签名为debug包的签名，这样每次直接运行即可，待程序发布之前再将签名修改为正式包的签名②、若使用的正式包的签名，则每次都要打包运行，或者可以在build.gradle中的android标签中添加下面的代码（推荐）： 12345678signingConfigs &#123; debug &#123; storeFile file(&quot;正式keystore的路径&quot;) storePassword &quot;密码&quot; keyAlias &quot;别名&quot; keyPassword &quot;密码&quot; &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo建站全攻略]]></title>
      <url>%2F2016%2F12%2F20%2FHexo%E5%BB%BA%E7%AB%99%E5%85%A8%E6%94%BB%E7%95%A5%2F</url>
      <content type="text"><![CDATA[一、Hexo简介Hexo 是一个快速、简洁且高效的博客框架，使用 Markdown解析文章，在几秒内，即可利用靓丽的主题生成静态网页。演示博客：https://juemuren4449.github.io官方文档：https://hexo.io/zh-cn/docs参考文档：http://jingyan.baidu.com/article/d8072ac47aca0fec95cefd2d.html 二、搭建流程（Windows）1、准备工作（1）、安装git下载地址：https://git-scm.com/download选择对应的平台，下载到本地，默认安装即可。 （2）、安装node.js下载地址：https://nodejs.org/en推荐下载LTS版，默认安装即可 2、安装hexo在任意位置右键，选择Git Bash Here，然后输入 npm install -g hexo-cli 回车之后，开始安装hexo，安装完成后如下图所示： 3、初始化hexo文件夹（1）、创建文件夹所有的建站文件都会存储在一个文件夹中，所以挑选一个位置，创建一个文件夹，路径和文件夹名字最好是英文。例如我在C:\Users\juemuren目录下创建myweb的文件夹。 （2）、初始化文件夹在myweb文件夹内右键，选择Git Bash Here，然后输入 hexo init 初始化完成后如下图所： 4、安装依赖包在Git Bash中输入 npm install 安装成功后如下图所示： 5、本地运行hexo在Git Bash中输入 hexo generate 再输入 hexo server 完成后在浏览器中打开：http://localhost:4000 打开后如下图所示，此时hexo就运行起来了，如果想停止服务，可以在Git Bash中按Ctrl + C 停止服务。 6、创建仓库在github上创建博客的仓库，创建仓库地址：https://github.com/new例如我的github帐号名为juemuren4449，那么我的Repository的name就必须为juemuren4449.github.io 7、修改配置文件（1）、修改deploy打开C:\Users\juemuren\myweb下的_config.yml文件，搜索deploy，修改为如下格式，其中repository就是刚才创建的仓库地址，需要注意的是每个字段后都有冒号，冒号后有一个英文的空格修改如下所示： 1234deploy: type: git repository: https://github.com/juemuren4449/juemuren4449.github.io.git branch: master （2）、修改URL搜索ULR，将url替换成https://juemuren4449.github.io/ 123# URL## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;url: https://juemuren4449.github.io 8、设置SSH keys（1）、生成SHH keys在Git Bash中输入下面的命令，查看是否生成过ssh，如果有则将C:\Users\用户名目录下的.ssh文件夹删除 ls -al ~/.ssh 然后依次输入下面的命令，邮箱为你自己申请github的邮箱 ssh-keygen -t rsa -C “example@qq.com” ssh-agent -s ssh-add ~/.ssh/id_rsa 如果出现Could not open a connection to your authentication agent.则依次输入下面的指令 eval `ssh-agent -s` ssh-add 然后输入下面的命令，复制公钥 clip &lt; ~/.ssh/id_rsa.pub （2）、设置SSH keys点击github的头像，选择Settings 然后依次点击左侧的SSHand GPG keys和右上角的New SSH keytitle可以随意取名，将刚才复制的公钥粘贴到key的文本框中，点击Add SHH key，要求输入密码，输入后即可添加成功。 （3）、测试在Git Bash中输入 ssh -T git@github.com 会出现提示，输入yes，再次按回车，当出现下图所示的文字时，表示测试成功，SSH配置成功！ 9、部署到github上在Git Bash中输入 hexo generate 然后再输入 hexo deploy 如果出现以下错误： 1ERROR Deployer not found: github 就需要安装hexo-deployer-git模块，在Git Bash中输入 npm install hexo-deployer-git –save 安装好之后重新执行 hexo deploy 10、访问博客在浏览器打开：https://juemuren4449.github.io/ ，即可访问基于hexo的博客了！PS：部署之后可能有延迟，请耐心等待。 11、命令简化hexo的命令可以简写，如下： 命令 简写 hexo generate hexo g hexo deploy hexo d hexo server hexo s]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[开始记录]]></title>
      <url>%2F2016%2F12%2F18%2F%E5%BC%80%E5%A7%8B%E8%AE%B0%E5%BD%95%2F</url>
      <content type="text"><![CDATA[好记性不如烂笔头上学的时候老师就经常说： 要多记，好记性不如烂笔头！ 当时可能没什么感触，但是随着时间的流逝，这句话就越发有道理，所以准备将自己工作和生活中的东西记下来，以便以后查看。 记录内容记录的内容可能会包括一些生活的随笔和Android方面的技术笔记，因为本博客是基于Hexo搭建的，从网上总结了搭建的方法，所以也会包含这方面的内容。 个人认知个人才疏学浅，技术笔记若有疏漏和错误，还希望浏览我博客的朋友们能不吝赐教，互相学习进步！]]></content>
    </entry>

    
  
  
</search>
